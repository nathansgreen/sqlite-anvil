#!/bin/bash

make || exit $?

# Uncomment to enable patchgroup traces on the tests
#TRACE_TEST="PATCHGROUP_TRACE=test.pgt"
#TRACE_TPCC="PATCHGROUP_TRACE=tpcc.pgt"
#TRACE_DBT2="PATCHGROUP_TRACE=dbt2.pgt"

# Uncomment to enable oprofile
#OPROFILE=oprofile

HOST="`hostname`"
if [ "${HOST#kudos-}" == "$HOST" -a "$HOST" != "execl" ]
then
	echo "Not running on a kudos-* test machine, won't overwrite your file systems."
	exit 1
fi

if mount | grep -q "on /mnt/test"
then
	echo "/mnt/test is mounted; unmount before running this script."
	exit 1
fi

echo -n "Creating file system... "
sudo mke2fs -m 0 -b 4096 /dev/sdb1 &> /dev/null
sudo mount /dev/sdb1 /mnt/test -t ext2
sudo chown `whoami` /mnt/test
mkdir /mnt/test/journals
sudo umount /mnt/test
echo "done."

echo -n "Loading Featherstitch... "
sudo insmod fstitch/kfstitchd.ko device=/dev/sdb || exit $?
[ -f /proc/kfstitchd_debug ] && (cat /proc/kfstitchd_debug > try.fdb &) || rm -f try.fdb
sudo mount /mnt/test
echo "done."

# Run the sqlite test
(WD="`pwd`"; cd /mnt/test; ulimit -c unlimited; eval $TRACE_TEST exec '"$WD/sqlite3"' sql-test) << EOF
create table foo (bar int primary key, baz int);
.explain on
explain insert into foo (bar, baz) values (64, 10);
pragma vdbe_trace=on;
insert into foo (bar, baz) values (64, 10);
insert into foo (bar, baz) values (65, 11);
insert into foo (bar, baz) values (66, 12);
select * from foo;
explain select * from foo where bar=65;
select * from foo where bar=64;
select * from foo where bar=65;
select * from foo where bar=66;
EOF
find /mnt/test -type f -print0 | xargs -0 ls -l

# Create the TPCC tables
(WD="`pwd`"; cd /mnt/test; ulimit -c unlimited; eval $TRACE_TPCC exec '"$WD/sqlite3"' tpcc-empty) < tpcc-create.sql
find /mnt/test -type f -print0 | xargs -0 ls -l

# Run DBT2
if [ -d dbt2/ ]
then
	DBT2_TMP=/tmp/dbt2-sqlite.$$
	BUILD_DB=dbt2/scripts/sqlite/build_db.sh
	# Use -t to disable toilet mode; requires a patched dbt2
	#TOILET=-t
	echo "Running DBT2..."
	mkdir $DBT2_TMP
	if [ "$OPROFILE" ]
	then
		sudo opcontrol --init
		sudo opcontrol --reset
		sudo opcontrol "--vmlinux=/usr/src/linux-`uname -r`/vmlinux"
		sudo opcontrol --start
	fi
	(WD="`pwd`"; cd /mnt/test; ulimit -c unlimited; eval $TRACE_DBT2 exec '"$WD/$BUILD_DB"' $TOILET -d sql-dbt2 -f $DBT2_TMP -g -w 1)
	if [ "$OPROFILE" ]
	then
		sudo opcontrol --shutdown
		sudo opcontrol --deinit
		opreport --symbols .libs/lt-sqlite3 > "$OPROFILE"
	fi
	rm -rf $DBT2_TMP
	find /mnt/test -type f -print0 | xargs -0 ls -l
fi

echo "Unloading Featherstitch..."
sudo umount /mnt/test
time sudo rmmod kfstitchd

echo -ne \\007

sudo mount /dev/sdb1 /mnt/test -t ext2
rm -f gmon.out* gmon.sum*
if [ -f /mnt/test/gmon.out ]
then
	echo -n "Processing gprof data... "
	cp /mnt/test/gmon.out* .
	for gmon in gmon.out*
	do
		# if there is gmon.out, sqlite3 will be statically linked
		gprof sqlite3 $gmon > ${gmon/out/sum}
	done
	echo "done."
fi
for pgt in /mnt/test/*.pgt
do
	[ "$pgt" == "/mnt/test/*.pgt" ] && break
	echo "Patchgroup trace: `basename "$pgt"`"
	cp "$pgt" .
done
if [ -f /mnt/test/core ]
then
	echo "Starting debugger on core."
	gdb -c /mnt/test/core .libs/lt-sqlite3
fi
sudo umount /mnt/test
